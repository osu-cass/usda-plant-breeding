//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Usda.PlantBreeding.Data.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PlantBreedingConnection : DbContext
    {
        public PlantBreedingConnection()
            : base("name=PlantBreedingConnection")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Family> Families { get; set; }
        public virtual DbSet<Genotype> Genotypes { get; set; }
        public virtual DbSet<CrossType> CrossTypes { get; set; }
        public virtual DbSet<Genus> Genus { get; set; }
        public virtual DbSet<Ploidy> Ploidies { get; set; }
        public virtual DbSet<Question> Questions { get; set; }
        public virtual DbSet<Answer> Answers { get; set; }
        public virtual DbSet<MapComponent> MapComponents { get; set; }
        public virtual DbSet<Candidate> Candidates { get; set; }
        public virtual DbSet<Map> Maps { get; set; }
        public virtual DbSet<Repetition> Repetitions { get; set; }
        public virtual DbSet<CrossPlan> CrossPlans { get; set; }
        public virtual DbSet<Fate> Fates { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<Note> Notes { get; set; }
        public virtual DbSet<FlatType> FlatTypes { get; set; }
        public virtual DbSet<FlatNote> FlatNotes { get; set; }
        public virtual DbSet<Years> Years { get; set; }
        public virtual DbSet<MapComponentYears> MapComponentYears { get; set; }
        public virtual DbSet<UserPreference> UserPreferences { get; set; }
        public virtual DbSet<Purpose> Purposes { get; set; }
        public virtual DbSet<InputType> InputTypes { get; set; }
        public virtual DbSet<Grower> Growers { get; set; }
        public virtual DbSet<Material> Materials { get; set; }
        public virtual DbSet<OrderProduct> OrderProducts { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<Origin> Origins { get; set; }
    
        public virtual ObjectResult<GetAccessions_Result> GetAccessions(Nullable<int> genusId, string year, Nullable<int> originId, Nullable<bool> crossesFlag, Nullable<bool> selectionsFlag)
        {
            var genusIdParameter = genusId.HasValue ?
                new ObjectParameter("GenusId", genusId) :
                new ObjectParameter("GenusId", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var originIdParameter = originId.HasValue ?
                new ObjectParameter("OriginId", originId) :
                new ObjectParameter("OriginId", typeof(int));
    
            var crossesFlagParameter = crossesFlag.HasValue ?
                new ObjectParameter("CrossesFlag", crossesFlag) :
                new ObjectParameter("CrossesFlag", typeof(bool));
    
            var selectionsFlagParameter = selectionsFlag.HasValue ?
                new ObjectParameter("SelectionsFlag", selectionsFlag) :
                new ObjectParameter("SelectionsFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccessions_Result>("GetAccessions", genusIdParameter, yearParameter, originIdParameter, crossesFlagParameter, selectionsFlagParameter);
        }
    
        public virtual ObjectResult<GetCrossPlanLocations_Result> GetCrossPlanLocations(Nullable<int> genusId, string year)
        {
            var genusIdParameter = genusId.HasValue ?
                new ObjectParameter("GenusId", genusId) :
                new ObjectParameter("GenusId", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCrossPlanLocations_Result>("GetCrossPlanLocations", genusIdParameter, yearParameter);
        }
    
        public virtual ObjectResult<GetCrossPlans_Result> GetCrossPlans(Nullable<int> genusId, string year)
        {
            var genusIdParameter = genusId.HasValue ?
                new ObjectParameter("GenusId", genusId) :
                new ObjectParameter("GenusId", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCrossPlans_Result>("GetCrossPlans", genusIdParameter, yearParameter);
        }
    
        public virtual ObjectResult<BreedingSummary_Result> BreedingSummary(Nullable<int> genusId)
        {
            var genusIdParameter = genusId.HasValue ?
                new ObjectParameter("GenusId", genusId) :
                new ObjectParameter("GenusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BreedingSummary_Result>("BreedingSummary", genusIdParameter);
        }
    
        public virtual int CopyPhenotypeToLatestYear(Nullable<int> mapId, string fromYear, Nullable<bool> isSeedling)
        {
            var mapIdParameter = mapId.HasValue ?
                new ObjectParameter("MapId", mapId) :
                new ObjectParameter("MapId", typeof(int));
    
            var fromYearParameter = fromYear != null ?
                new ObjectParameter("FromYear", fromYear) :
                new ObjectParameter("FromYear", typeof(string));
    
            var isSeedlingParameter = isSeedling.HasValue ?
                new ObjectParameter("isSeedling", isSeedling) :
                new ObjectParameter("isSeedling", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CopyPhenotypeToLatestYear", mapIdParameter, fromYearParameter, isSeedlingParameter);
        }
    
        public virtual int DeletePhenotypeFromYear(Nullable<int> mapId, string year, Nullable<bool> isSeedling)
        {
            var mapIdParameter = mapId.HasValue ?
                new ObjectParameter("MapId", mapId) :
                new ObjectParameter("MapId", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var isSeedlingParameter = isSeedling.HasValue ?
                new ObjectParameter("isSeedling", isSeedling) :
                new ObjectParameter("isSeedling", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePhenotypeFromYear", mapIdParameter, yearParameter, isSeedlingParameter);
        }
    
        public virtual ObjectResult<GetAccessionParent_Result> GetAccessionParent(Nullable<int> genusId, string year, Nullable<bool> internalFlag, Nullable<bool> crossesFlag)
        {
            var genusIdParameter = genusId.HasValue ?
                new ObjectParameter("GenusId", genusId) :
                new ObjectParameter("GenusId", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var internalFlagParameter = internalFlag.HasValue ?
                new ObjectParameter("InternalFlag", internalFlag) :
                new ObjectParameter("InternalFlag", typeof(bool));
    
            var crossesFlagParameter = crossesFlag.HasValue ?
                new ObjectParameter("CrossesFlag", crossesFlag) :
                new ObjectParameter("CrossesFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccessionParent_Result>("GetAccessionParent", genusIdParameter, yearParameter, internalFlagParameter, crossesFlagParameter);
        }
    
        public virtual ObjectResult<GetAccessions1_Result> GetAccessions1(Nullable<int> genusId, string year, Nullable<bool> internalFlag, Nullable<bool> crossesFlag)
        {
            var genusIdParameter = genusId.HasValue ?
                new ObjectParameter("GenusId", genusId) :
                new ObjectParameter("GenusId", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var internalFlagParameter = internalFlag.HasValue ?
                new ObjectParameter("InternalFlag", internalFlag) :
                new ObjectParameter("InternalFlag", typeof(bool));
    
            var crossesFlagParameter = crossesFlag.HasValue ?
                new ObjectParameter("CrossesFlag", crossesFlag) :
                new ObjectParameter("CrossesFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccessions1_Result>("GetAccessions1", genusIdParameter, yearParameter, internalFlagParameter, crossesFlagParameter);
        }
    
        public virtual ObjectResult<GetCrossPlanLocations1_Result> GetCrossPlanLocations1(Nullable<int> genusId, string year)
        {
            var genusIdParameter = genusId.HasValue ?
                new ObjectParameter("GenusId", genusId) :
                new ObjectParameter("GenusId", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCrossPlanLocations1_Result>("GetCrossPlanLocations1", genusIdParameter, yearParameter);
        }
    
        public virtual ObjectResult<GetCrossPlans1_Result> GetCrossPlans1(Nullable<int> genusId, string year)
        {
            var genusIdParameter = genusId.HasValue ?
                new ObjectParameter("GenusId", genusId) :
                new ObjectParameter("GenusId", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCrossPlans1_Result>("GetCrossPlans1", genusIdParameter, yearParameter);
        }
    
        public virtual ObjectResult<GetMapComponentFates_Result> GetMapComponentFates(string year, Nullable<bool> mapIsSeedling, Nullable<int> genusId)
        {
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var mapIsSeedlingParameter = mapIsSeedling.HasValue ?
                new ObjectParameter("MapIsSeedling", mapIsSeedling) :
                new ObjectParameter("MapIsSeedling", typeof(bool));
    
            var genusIdParameter = genusId.HasValue ?
                new ObjectParameter("GenusId", genusId) :
                new ObjectParameter("GenusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMapComponentFates_Result>("GetMapComponentFates", yearParameter, mapIsSeedlingParameter, genusIdParameter);
        }
    
        public virtual ObjectResult<GetMapComponents_Result> GetMapComponents(string year, Nullable<int> mapId, Nullable<bool> mapComponentSeedlingFlag)
        {
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var mapIdParameter = mapId.HasValue ?
                new ObjectParameter("MapId", mapId) :
                new ObjectParameter("MapId", typeof(int));
    
            var mapComponentSeedlingFlagParameter = mapComponentSeedlingFlag.HasValue ?
                new ObjectParameter("MapComponentSeedlingFlag", mapComponentSeedlingFlag) :
                new ObjectParameter("MapComponentSeedlingFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMapComponents_Result>("GetMapComponents", yearParameter, mapIdParameter, mapComponentSeedlingFlagParameter);
        }
    
        public virtual ObjectResult<GetMapInventory_Result> GetMapInventory(string year, Nullable<int> mapId)
        {
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var mapIdParameter = mapId.HasValue ?
                new ObjectParameter("MapId", mapId) :
                new ObjectParameter("MapId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMapInventory_Result>("GetMapInventory", yearParameter, mapIdParameter);
        }
    
        public virtual ObjectResult<GetMapViewComponents_Result> GetMapViewComponents(string year, Nullable<int> mapId, Nullable<bool> showPicking, Nullable<bool> mapComponentSeedlingFlag)
        {
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var mapIdParameter = mapId.HasValue ?
                new ObjectParameter("MapId", mapId) :
                new ObjectParameter("MapId", typeof(int));
    
            var showPickingParameter = showPicking.HasValue ?
                new ObjectParameter("ShowPicking", showPicking) :
                new ObjectParameter("ShowPicking", typeof(bool));
    
            var mapComponentSeedlingFlagParameter = mapComponentSeedlingFlag.HasValue ?
                new ObjectParameter("MapComponentSeedlingFlag", mapComponentSeedlingFlag) :
                new ObjectParameter("MapComponentSeedlingFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMapViewComponents_Result>("GetMapViewComponents", yearParameter, mapIdParameter, showPickingParameter, mapComponentSeedlingFlagParameter);
        }
    
        public virtual ObjectResult<GetOrders_Result> GetOrders(Nullable<int> orderId, Nullable<int> genus, Nullable<int> year, Nullable<int> grower, Nullable<int> genotype)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(int));
    
            var genusParameter = genus.HasValue ?
                new ObjectParameter("Genus", genus) :
                new ObjectParameter("Genus", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var growerParameter = grower.HasValue ?
                new ObjectParameter("Grower", grower) :
                new ObjectParameter("Grower", typeof(int));
    
            var genotypeParameter = genotype.HasValue ?
                new ObjectParameter("Genotype", genotype) :
                new ObjectParameter("Genotype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOrders_Result>("GetOrders", orderIdParameter, genusParameter, yearParameter, growerParameter, genotypeParameter);
        }
    
        public virtual ObjectResult<GetPhenotypeEntry_Result> GetPhenotypeEntry(string year, Nullable<int> mapId, Nullable<int> genotypeId)
        {
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var mapIdParameter = mapId.HasValue ?
                new ObjectParameter("MapId", mapId) :
                new ObjectParameter("MapId", typeof(int));
    
            var genotypeIdParameter = genotypeId.HasValue ?
                new ObjectParameter("GenotypeId", genotypeId) :
                new ObjectParameter("GenotypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPhenotypeEntry_Result>("GetPhenotypeEntry", yearParameter, mapIdParameter, genotypeIdParameter);
        }
    
        public virtual int UpdateSelectionYearForGenotypes(Nullable<int> mapId, Nullable<bool> isSeedling)
        {
            var mapIdParameter = mapId.HasValue ?
                new ObjectParameter("mapId", mapId) :
                new ObjectParameter("mapId", typeof(int));
    
            var isSeedlingParameter = isSeedling.HasValue ?
                new ObjectParameter("isSeedling", isSeedling) :
                new ObjectParameter("isSeedling", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSelectionYearForGenotypes", mapIdParameter, isSeedlingParameter);
        }
    }
}
