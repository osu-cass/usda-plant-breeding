@using Usda.PlantBreeding.Data.Models;

@model Family

@{
    ViewBag.Title = "Family";
}
<div class="row"></div>
<hr />

@Html.ValidationSummary(true, "", new { @class = "text-danger" })
@Html.HiddenFor(model => model.Id)
@Html.HiddenFor(model => model.GenusId)
@Html.HiddenFor(model => model.IsReciprocal)

<div class="row"></div>
<hr />

<div class="row">
    <div class="col-md-6">
        <div class="form-group">
            @Html.LabelFor(model => model.OriginId, htmlAttributes: new { @class = "control-label" })
            <div>
                @SearchHelpers.Search(Url.Action("Search", "Origins", new { area = "Admin" }), "OriginId", null, "Origin", Model.OriginId.ToString(), (Model.Origin ?? new Origin()).Name)
                @Html.ValidationMessageFor(model => model.OriginId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CrossNum, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.CrossNum, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CrossNum, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Year, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.Year, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Year, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.MaleParent, htmlAttributes: new { @class = "control-label" })
            <div>
                @GenotypeHelpers.GenotypeDataList(@Url, "MaleParent", "MaleParent", @Model.GenusId, @Model.MaleParent, (Model.MaleGenotype ?? new Usda.PlantBreeding.Data.Models.Genotype()).Name)
                @Html.ValidationMessageFor(model => model.MaleParent, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.FemaleParent, htmlAttributes: new { @class = "control-label" })
            <div>
                @GenotypeHelpers.GenotypeDataList(@Url, "FemaleParent", "FemaleParent", @Model.GenusId, @Model.FemaleParent, (Model.FemaleGenotype ?? new Usda.PlantBreeding.Data.Models.Genotype()).Name)
                @Html.ValidationMessageFor(model => model.FemaleParent, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.IsReciprocal, htmlAttributes: new { @class = "control-label" })
            <div>
                @CrossPlanHelpers.CheckEditor("IsReciprocal", "IsReciprocal", Model.IsReciprocal)
                @Html.ValidationMessageFor(model => model.IsReciprocal, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.GivenName, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.GivenName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.GivenName, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group">
            @Html.LabelFor(model => model.FieldPlantedNum, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.FieldPlantedNum, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FieldPlantedNum, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.TransplantedNum, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.TransplantedNum, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TransplantedNum, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.SeedNum, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.SeedNum, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SeedNum, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CrossType, htmlAttributes: new { @class = "control-label" })
            <div>
                @* gets select list from viewbag *@
                @SearchHelpers.DropDownList("CrossTypeId", "CrossTypeId", ViewBag.CrossTypeId, Model.CrossTypeId.ToString())
                @*@Html.DropDownList("CrossTypeId", null, "", htmlAttributes: new { @class = "form-control" })*@
                @Html.ValidationMessageFor(model => model.CrossTypeId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Purpose, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.Purpose, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Purpose, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.PloidyId, htmlAttributes: new { @class = "control-label" })
            <div>
                @* gets select list from viewbag *@
                @SearchHelpers.DropDownList("PloidyId", "PloidyId", ViewBag.PloidyId, Model.PloidyId.ToString())
                @*@Html.DropDownList("PloidyId", null, "", htmlAttributes: new { @class = "form-control" })*@
                @Html.ValidationMessageFor(model => model.PloidyId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Note, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.EditorFor(model => model.Note, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Note, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
</div>
